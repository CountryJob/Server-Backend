package com.example.farm4u.service;

import com.example.farm4u.AiClient;
import com.example.farm4u.dto.job.JobDto;
import com.example.farm4u.dto.worker.WorkerDto;
import com.example.farm4u.dto.job.JobRequest;
import com.example.farm4u.entity.Application;
import com.example.farm4u.entity.Farmer;
import com.example.farm4u.entity.Job;
import com.example.farm4u.exception.NotFoundException;
import com.example.farm4u.repository.*;
import org.springframework.stereotype.Service;

import jakarta.transaction.Transactional;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.time.LocalDate;
import java.time.LocalTime;
import java.util.*;
import java.util.stream.Collectors;

/**
 * JobService
 * - 공고 등록 시 농가정보(address/areaSize 등) 자동 반영
 * - 각종 필터, 거리, 정렬 조건 완벽 분기 처리
 * - 지원자 리스트 AI Score 정렬까지!
 */
@Service
public class JobService {

    private final JobRepository jobRepository;
    private final FarmerRepository farmerRepository;
    private final ApplicationRepository applicationRepository;
    private final WorkerRepository workerRepository;
    private final AiClient aiClient; // AI 매칭 점수용 외부 클라이언트(의존성 주입)
    private final UserRepository userRepository;

    public JobService(
            JobRepository jobRepository,
            FarmerRepository farmerRepository,
            ApplicationRepository applicationRepository,
            WorkerRepository workerRepository,
            AiClient aiClient, UserRepository userRepository
    ) {
        this.jobRepository = jobRepository;
        this.farmerRepository = farmerRepository;
        this.applicationRepository = applicationRepository;
        this.workerRepository = workerRepository;
        this.aiClient = aiClient;
        this.userRepository = userRepository;
    }

    /** 1. 공고 등록(농가 기준 address, area사이즈 자동 세팅)
     * job 음성 ai + 자동 생성 ai 호춣까지 */
    // job save는 하지 않음
    @Transactional
    public JobDto autoWriteAndCreateJob(Long userId, MultipartFile audioFile) throws IOException {
        // 1. 농가 정보 조회
        Farmer farmer = farmerRepository.findByUserIdAndDeletedFalse(userId)
                .orElseThrow(() -> new NotFoundException("농가 정보 없음"));

        // 2. AI 서버 요청 -> 전체 JobDto 자동 생성
        JobDto autoGenerated = aiClient.autoWriteJob(farmer.getAddress(), audioFile);

        // 3. 농가 정보 반영 (주소/면적 자동 세팅)
        autoGenerated.setUserId(userId);

        return autoGenerated;
    }

    // job 여기서 save (수정사항 반영해서 요청)
    @Transactional
    public void createJob(Long userId, JobDto jobDto){
        Job job = Job.builder()
                .userId(userId)
                .title(jobDto.getTitle())
                .description(jobDto.getDescription())
                .address(jobDto.getAddress())
                .areaSize(jobDto.getAreaSize())
                .startDate(LocalDate.parse(jobDto.getStartDate()))
                .endDate(LocalDate.parse(jobDto.getEndDate()))
                .startTime(LocalTime.parse(jobDto.getStartTime()))
                .endTime(LocalTime.parse(jobDto.getEndTime()))
                .salaryMale(jobDto.getSalaryMale())
                .salaryFemale(jobDto.getSalaryFemale())
                .meal(jobDto.getMeal())
                .snack(jobDto.getSnack())
                .transportAllowance(jobDto.getTransportAllowance())
                .recruitCountMale(jobDto.getRecruitCountMale())
                .recruitCountFemale(jobDto.getRecruitCountFemale())
                .experienceRequired(jobDto.getExperienceRequired())
                .closed(false)
                .deleted(false)
                .build();

        jobRepository.save(job);
    }

    // ai 단건 필드 인식용 패스스루
    public String autoWriteField(String questionKey, MultipartFile audioFile) throws IOException {
        return aiClient.autoWriteField(questionKey, audioFile);
    }

    /** 2. 공고 수정(본인, req 존재하는 값만 update) */
    @Transactional
    public JobDto updateJob(Long userId, Long jobId, JobRequest req) {
        Job job = jobRepository.findByIdAndUserIdAndDeletedFalse(jobId, userId)
                .orElseThrow(() -> new NotFoundException("공고 정보 없음"));
        if (req.getTitle() != null) job.setTitle(req.getTitle());
        if (req.getDescription() != null) job.setDescription(req.getDescription());
        if (req.getStartDate() != null) job.setStartDate(req.getStartDate());
        if (req.getEndDate() != null) job.setEndDate(req.getEndDate());
        if (req.getStartTime() != null) job.setStartTime(req.getStartTime());
        if (req.getEndTime() != null) job.setEndTime(req.getEndTime());
        if (req.getSalaryMale() != null) job.setSalaryMale(req.getSalaryMale());
        if (req.getSalaryFemale() != null) job.setSalaryFemale(req.getSalaryFemale());
        if (req.getMeal() != null) job.setMeal(req.getMeal());
        if (req.getSnack() != null) job.setSnack(req.getSnack());
        if (req.getTransportAllowance() != null) job.setTransportAllowance(req.getTransportAllowance());
        if (req.getRecruitCountMale() != null) job.setRecruitCountMale(req.getRecruitCountMale());
        if (req.getRecruitCountFemale() != null) job.setRecruitCountFemale(req.getRecruitCountFemale());
        if (req.getExperienceRequired() != null) job.setExperienceRequired(req.getExperienceRequired());
        // address/area_size는 농가 정보가 바뀌어야만 반영하므로 수정X
        return new JobDto(job);
    }

    /** 3. 공고 삭제 (논리) */
    @Transactional
    public void deleteJob(Long userId, Long jobId) {
        Job job = jobRepository.findByIdAndUserIdAndDeletedFalse(jobId, userId)
                .orElseThrow(() -> new NotFoundException("공고 정보 없음"));
        job.setDeleted(true);
    }

    /** 4. 공고 마감 */
    @Transactional
    public void closeJob(Long userId, Long jobId) {
        Job job = jobRepository.findByIdAndUserIdAndDeletedFalse(jobId, userId)
                .orElseThrow(() -> new NotFoundException("공고 정보 없음"));
        job.setClosed(true);
    }

    /**
     * 5. 공고 리스트 필터/정렬 다중 분기(거리 필터 사용시 farmer 테이블 조인)
     * userMode: "ANONYMOUS", "WORKER" 등
     * 여기서 job ai 추천순으로 리턴 (recommendJobsForWorker)
     */
    public List<JobDto> getJobList(
            Long userId,
//            String userMode,
//            Double lat,
//            Double lng,
//            Double radius,
//            Boolean experienceRequired,
//            Integer salaryMaleMin,
//            Integer salaryFemaleMin,
//            LocalDate startDateFrom,
//            LocalDate startDateTo,
            String sort
    ) {
//        List<Job> jobs;
//        if (lat != null && lng != null && radius != null) {
//            jobs = jobRepository.findByAllFiltersAndDistance(
//                    lat, lng, radius,
//                    experienceRequired, salaryMaleMin, salaryFemaleMin,
//                    startDateFrom, startDateTo
//            );
//            // 거리순
//        } else {
//            jobs = jobRepository.findFilteredJobs(
//                    experienceRequired, salaryMaleMin, salaryFemaleMin,
//                    startDateFrom, startDateTo
//            );
//        }
        String userMode;
        System.out.println("userId = " + userId);
        if (userId == null) userMode = "ANONYMOUS";
        else userMode = userRepository.findCurrentModeById(userId);
        System.out.println("userMode = " + userMode);

        // 전체 Job List -> JobDto List 변환
        List<Job> jobs = jobRepository.findAll();
        List<JobDto> jobDtos = jobs.stream().map(JobDto::new).collect(Collectors.toList());

        // --- WORKER 모드: AI 추천순으로 정렬 ---
        if ("WORKER".equalsIgnoreCase(userMode) && sort == null ) { // sort가 null이 아니면 추천순X

            // 1) 해당 worker 정보 조회
            var worker = workerRepository.findByUserIdAndDeletedFalse(userId)
                    .orElseThrow(() -> new NotFoundException("구직자 정보 없음"));

            System.out.println("worker userId = " + userId);
            System.out.println("worker getGender = " + worker.getGender());
            System.out.println("worker getHasFarmExp = " + worker.getHasFarmExp());

            // trustScore 계산 안되어있으면(리뷰작성 안되어있으면) AI 추천순 불가
            if (worker.getTrustScore() != null) {
                // 2) AI 추천점수 요청
                Map<Long, Double> aiScoreMap = aiClient.recommendJobsForWorker(
                        worker.getGender().toString(),
                        worker.getHasFarmExp(),
                        worker.getTrustScore(),
                        worker.getWorkDays().stream()
                                .map(Enum::name)
                                .collect(Collectors.toSet()),
                        jobDtos // 전체 잡 리스트 전달
                );

                // 3) aiScore 필드 세팅
                for (JobDto jobDto : jobDtos) {
                    Double score = aiScoreMap.getOrDefault(jobDto.getId(), 0.0);
                    jobDto.setAiScore(score);
                }
                // 4) 추천 점수 내림차순 정렬
                jobDtos.sort(Comparator.comparing(JobDto::getAiScore, Comparator.nullsLast(Comparator.reverseOrder())));
            }
        }
        else if (sort != null) {
            if ("salary".equalsIgnoreCase(sort)) {
                jobs.sort(Comparator.comparing(Job::getSalaryMale, Comparator.nullsLast(Comparator.reverseOrder()))
                        .thenComparing(Job::getSalaryFemale, Comparator.nullsLast(Comparator.reverseOrder())));
            } else if ("period".equalsIgnoreCase(sort)) {
                jobs.sort(Comparator.comparing(Job::getStartDate, Comparator.nullsFirst(Comparator.naturalOrder())));
            } else if ("closed".equalsIgnoreCase(sort)) {
                jobs.sort(Comparator.comparing(Job::getClosed, Comparator.nullsLast(Comparator.naturalOrder())));
            }
        } else {
            // ANONYMOUS : 최신순
            jobDtos.sort(Comparator.comparing(JobDto::getCreatedAt, Comparator.nullsLast(Comparator.reverseOrder())));
        }

        return jobDtos;
    }

    /**
     * 7. 특정 공고 지원자 리스트(농가 자기 공고만, AI 매칭 점수순 정렬까지)
     * 지원자마다 trustScore(WorkerDto), AI점수(aiScore) 모두 설정하여 리턴
     */
    public List<WorkerDto> getApplicantsForJobWithAiScore(Long farmerUserId, Long jobId) {
        // 1) 소유 공고 검증
//        Job job = jobRepository.findByIdAndUserIdAndDeletedFalse(jobId, farmerUserId)
//                .orElseThrow(() -> new NotFoundException("공고"));

        // 테스트용 (리뷰 없을 때)
        Job job = jobRepository.findById(jobId).orElseThrow(()->new NotFoundException("공고"));

        // 2) 지원자 목록 추출
        List<Application> applications = applicationRepository.findByJobIdAndDeletedFalse(jobId);
        List<WorkerDto> workerDtos = applications.stream()
                .map(app -> new WorkerDto(app.getWorker()))
                .collect(Collectors.toList());

        // 테스트용 (리뷰 없을 때)
//        // 3) AI 배치 매칭점수 요청 (job 메타 + 전체 지원자)
//        Map<Long, Double> aiScoreMap = aiClient.getBatchMatchScores(
//                job.getStartDate().toString(),
//                job.getEndDate().toString(),
//                job.getExperienceRequired(),
//                job.getRecruitCountMale(),
//                job.getRecruitCountFemale(),
//                workerDtos // 전체 지원자 리스트
//        );
//
//        // 4) aiScore 값 대입
//        for (WorkerDto dto : workerDtos) {
//            Double score = aiScoreMap.getOrDefault(dto.getUserId(), 0.0);
//            dto.setTrustScore(score);
//        }
//
//        // 5) 추천 점수 내림차순 정렬
//        workerDtos.sort(Comparator.comparing(WorkerDto::getTrustScore, Comparator.nullsLast(Comparator.reverseOrder())));
        return workerDtos;
    }


    public JobDto getJobById(Long id){
        Job j = jobRepository.findById(id).orElseThrow(() -> new NotFoundException("공고 정보 없음"));
        return new JobDto(j);
    }
}
